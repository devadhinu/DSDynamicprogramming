package TwopointerString;

import org.junit.Assert;
import org.junit.Test;

public class RemovePalindromicsubsequence {

	/*
	 * You are given a string s consisting only of letters 'a' and 'b'. In a single
	 * step you can remove one palindromic subsequence from s.
	 * 
	 * Return the minimum number of steps to make the given string empty.
	 * 
	 * A string is a subsequence of a given string if it is generated by deleting
	 * some characters of a given string without changing its order. Note that a
	 * subsequence does not necessarily need to be contiguous.
	 * 
	 * A string is called palindrome if is one that reads the same backward as well
	 * as forward.
	 * 
	 * 
	 * 
	 * Example 1:
	 * 
	 * Input: s = "ababa" Output: 1 Explanation: s is already a palindrome, so its
	 * entirety can be removed in a single step. Example 2:
	 * 
	 * Input: s = "abb" Output: 2 Explanation: "abb" -> "bb" -> "". Remove
	 * palindromic subsequence "a" then "bb". Example 3:
	 * 
	 * Input: s = "baabb" Output: 2 Explanation: "baabb" -> "b" -> "". Remove
	 * palindromic subsequence "baab" then "b".
	 * 
	 * 
	 * Constraints:
	 * 
	 * 1 <= s.length <= 1000 s[i] is either 'a' or 'b'.
	 */
	/*
	 * Pseudocode :
	 * 
	 * 
	 */
	@Test
	public void positive() {
		//Positive Test Data
		String s = "abba";
		int output = 1;
		Assert.assertEquals(removePalindromeSub(s), output);
	}
	
	@Test
	public void edge() {
		//Edge Case Test Data
		String s = "bababbbbaa";
		int output = 2;
		Assert.assertEquals(removePalindromeSub(s), output);
	}
	
	@Test
	public void negative() {
		//Negative Test Data
		String s = "";
		int output = 0;
		Assert.assertEquals(removePalindromeSub(s), output);
	}

	@Test
	public void negative2() {
		//Negative Test Data
		String s = "b";
		int output = 1;
		Assert.assertEquals(removePalindromeSub(s), output);
	}
	
	@Test
	public void negative3() {
		//Negative Test Data
		String s = "ababababaaaaabbbbbbaaaabbbbbababababababababababa";
		int output = 2;
		Assert.assertEquals(removePalindromeSub(s), output);
		
	}
	 public int removePalindromeSub(String s) {
	        
	        int start = 0, end = s.length()-1;
			if(s.length()==0) return 0;
			while(start<=end) {
				if(s.charAt(start)!=s.charAt(end)) {
					return 2;
				}
				start++;
				end--;
			}
			return 1;
	        
	    }
}
